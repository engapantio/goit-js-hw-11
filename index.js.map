{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\nexport default function getImagesByQuery(query) {\n  // axios.defaults.headers.common['Access-Control-Allow-Origin'] =\n  //   'http://localhost:5173';\n  axios.defaults.baseURL = 'https://pixabay.com';\n\n  return axios\n    .get('/api', {\n      params: {\n        key: '51453441-8ba936d16adf232cd1ca4d1fd',\n        q: query,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n      },\n    })\n    .then(response => {\n      console.log(response.data);\n      return response.data;\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\n/*\nДля організації коду використовуй модульність та синтаксис export/import.\n\nУ файлі pixabay-api.js зберігай функції для виконання HTTP-запитів:\n\ngetImagesByQuery(query). Ця функція повинна приймати один параметр query (пошукове слово, яке є рядком), здійснювати HTTP-запит і повертати значення властивості data з отриманої відповіді.\n\nHTTP-запити\n\nДодай у проєкт бібліотеку Axios для написання коду, пов’язаного з HTTP-запитами.\n\n\nДля бекенду використовуй публічний API сервіс Pixabay. Зареєструйся, отримай свій унікальний ключ доступу і ознайомся з документацією.\n\nСписок параметрів рядка запиту, які тобі обов'язково необхідно вказати:\n\nkey — твій унікальний ключ доступу до API.\nq — слово для пошуку. Те, що буде вводити користувач.\nimage_type — тип зображення. Потрібні тільки фотографії, тому постав значення photo.\norientation — орієнтація фотографії. Постав значення horizontal.\nsafesearch — фільтр за віком. Постав значення true.\n\n\nУ відповіді буде об’єкт із декількома властивостями, в одному з яких (hits) буде масив об’єктів із зображеннями, що задовольнили критерії параметрів запиту.\n\nОбов’язково винеси функції для HTTP-запитів у файл pixabay-api.js у папці js. Це хороша практика та можливість відпрацювати модульний підхід до розробки.\n\n\nЯкщо бекенд повертає порожній масив, це означає, що нічого підходящого не було знайдено. У такому випадку відображай повідомлення з текстом:\n\nSorry, there are no images matching your search query. Please try again!\n\n*/\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport getImagesByQuery from './js/pixabay-api';\n\nconst searchForm = document.querySelector('.form');\nconst loaderEl = document.querySelector('.loader');\nlet meaning = '';\nsearchForm.addEventListener('submit', ev => {\n  ev.preventDefault();\n  const meaning = searchForm.elements['search-text'].value.trim();\n  if (meaning === '') {\n    return;\n  }\n  console.log(meaning);\n  const result = getImagesByQuery(meaning);\n  loaderEl.style.display = 'inline-block';\n  console.log(result.then(result => result.data));\n  if (result.hits.length === 0) {\n    iziToast.error({\n      backgroundColor: '#ef4040',\n      class: 'error-message',\n      message:\n        'Sorry, there are no images matching your search query. Please try again!',\n      messageColor: '#fff',\n      messageSize: '16px',\n      messageLineHeight: 1.5,\n      position: 'topRight',\n      iconUrl: '/img/x-octagon.svg',\n    });\n    return;\n  }\n\n  loaderEl.style.display = 'none';\n});\n\n/*\nУ файлі main.js напиши всю логіку роботи додатка. Виклики нотифікацій iziToast, усі перевірки на довжину масиву в отриманій відповіді робимо саме в цьому файлі. Імпортуй в нього функції із файлів pixabay-api.js та render-functions.js та викликай їх у відповідний момент.\nКористувач буде вводити рядок для пошуку в текстове поле, а за сабмітом форми необхідно виконувати HTTP-запит із цим пошуковим рядком.\n\n\n\nПри натисканні на кнопку відправки форми, додайте перевірку вмісту текстового поля на наявність порожнього рядка, щоб користувач не міг відправити запит, якщо поле пошуку порожнє.\n\n\n\n\n\n\n\nДля показу повідомлень використовуй бібліотеку iziToast.\n\n\nГалерея і картки зображень\n\n\n\nЕлемент галереї (список однотипних елементів <ul class=”gallery”>) уже має бути в HTML-документі. Після виконання HTTP-запитів у нього потрібно додавати розмітку карток зображень.\n\n\n\nКожне зображення описується об'єктом, з якого тебе цікавлять лише такі властивості:\n\nwebformatURL — посилання на маленьке зображення для списку карток у галереї\nlargeImageURL — посилання на велике зображення для модального вікна\ntags — рядок з описом зображення. Підійде для атрибута alt\nlikes — кількість вподобайок\nviews — кількість переглядів\ncomments — кількість коментарів\ndownloads — кількість завантажень\n\n\nПеред пошуком за новим ключовим словом необхідно повністю очищати вміст галереї, щоб не змішувати результати запитів.\n\nІндикатор завантаження\n\n\n\nДодай елемент для сповіщення користувача про процес завантаження зображень із бекенду. Завантажувач має з’являтися перед початком HTTP-запиту та зникати після його завершення.\n\n*/\n"],"names":["getImagesByQuery","query","axios","response","error","searchForm","loaderEl","ev","meaning","result","iziToast"],"mappings":"wvBACe,SAASA,EAAiBC,EAAO,CAG9C,OAAAC,EAAM,SAAS,QAAU,sBAElBA,EACJ,IAAI,OAAQ,CACX,OAAQ,CACN,IAAK,qCACL,EAAGD,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACpB,CACA,CAAK,EACA,KAAKE,IACJ,QAAQ,IAAIA,EAAS,IAAI,EAClBA,EAAS,KACjB,EACA,MAAMC,GAAS,CACd,QAAQ,MAAMA,CAAK,CACrB,CAAC,CACL,CCnBA,MAAMC,EAAa,SAAS,cAAc,OAAO,EAC3CC,EAAW,SAAS,cAAc,SAAS,EAEjDD,EAAW,iBAAiB,SAAUE,GAAM,CAC1CA,EAAG,eAAc,EACjB,MAAMC,EAAUH,EAAW,SAAS,aAAa,EAAE,MAAM,KAAI,EAC7D,GAAIG,IAAY,GACd,OAEF,QAAQ,IAAIA,CAAO,EACnB,MAAMC,EAAST,EAAiBQ,CAAO,EAGvC,GAFAF,EAAS,MAAM,QAAU,eACzB,QAAQ,IAAIG,EAAO,KAAKA,GAAUA,EAAO,IAAI,CAAC,EAC1CA,EAAO,KAAK,SAAW,EAAG,CAC5BC,EAAS,MAAM,CACb,gBAAiB,UACjB,MAAO,gBACP,QACE,2EACF,aAAc,OACd,YAAa,OACb,kBAAmB,IACnB,SAAU,WACV,QAAS,oBACf,CAAK,EACD,MACF,CAEAJ,EAAS,MAAM,QAAU,MAC3B,CAAC"}